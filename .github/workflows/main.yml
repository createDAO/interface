name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history and tags
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install Dependencies
      run: npm ci
    
    - name: TypeScript Check
      run: tsc --noEmit
    
    - name: Lint Check
      run: npm run lint
      
    - name: Build Check
      run: npm run build

  deploy-test:
    needs: test
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    environment: Test
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get Version
      id: get_version
      run: |
        git fetch --tags
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
        echo "VERSION=${LATEST_TAG}" >> $GITHUB_OUTPUT

    - name: Deploy to Test Server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          cd ${{ secrets.DEPLOY_PATH }}
          git pull
          echo "VITE_COMMIT_HASH=${GITHUB_SHA}" >> .env
          echo "VITE_APP_VERSION=${{ steps.get_version.outputs.VERSION }}" >> .env
          docker-compose up -d --build

  deploy-production:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: Live
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get Version
      id: get_version
      run: |
        git fetch --tags
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
        echo "VERSION=${LATEST_TAG}" >> $GITHUB_OUTPUT

    - name: Deploy to Production
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          cd ${{ secrets.DEPLOY_PATH }}
          git pull
          echo "VITE_COMMIT_HASH=${GITHUB_SHA}" >> .env
          echo "VITE_APP_VERSION=${{ steps.get_version.outputs.VERSION }}" >> .env
          docker-compose up -d --build

    - name: Purge Cloudflare Cache
      run: |
        curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
        -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
        -H "Content-Type: application/json" \
        --data '{"purge_everything":true}'
