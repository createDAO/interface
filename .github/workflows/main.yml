name: CI/CD Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/workflows/**'  # Ignore workflow file changes
    tags-ignore:
      - '**'  # Ignore tag pushes
  workflow_dispatch:  # Allow manual triggering

# Define environment variables available to all jobs
env:
  NODE_VERSION: '20'

permissions:
  contents: write # For release creation
  pull-requests: write
  deployments: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history and tags
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install Dependencies
      run: npm ci
    
    - name: TypeScript Check
      run: tsc --noEmit
    
    - name: Lint Check
      run: npm run lint
      
    - name: Build Check
      run: npm run build

  # Vercel handles test deployments automatically
  # We only need to wait for its status check in production deployment

  deploy-production:
    name: Deploy to Production
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment:
      name: Production
      url: https://createdao.org
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get Version
      id: get_version
      run: |
        # Get version from package.json
        VERSION=$(node -p "require('./package.json').version")
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        
        # Check if tag exists
        if ! git rev-parse "v${VERSION}" >/dev/null 2>&1; then
          # Create and push tag if it doesn't exist
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag -a "v${VERSION}" -m "Release v${VERSION}"
          git push origin "v${VERSION}"
        fi

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
    
    - name: Deploy to Production
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        VERSION: ${{ steps.get_version.outputs.VERSION }}
      run: |
        # Test SSH connection
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST "echo Connected successfully"
        
        # Get .env from server before build
        scp -i ~/.ssh/deploy_key $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/.env .
        
        # Update version variables in .env
        grep -v "VITE_COMMIT_HASH\|VITE_APP_VERSION" .env > .env.tmp || true
        echo "VITE_COMMIT_HASH=${GITHUB_SHA}" >> .env.tmp
        echo "VITE_APP_VERSION=${VERSION}" >> .env.tmp
        mv .env.tmp .env
        
        # Copy files to server
        rsync -avz --delete \
          --exclude='.git*' \
          --exclude='node_modules' \
          -e "ssh -i ~/.ssh/deploy_key" \
          ./ $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH
        
        # Execute deployment commands
        ssh -i ~/.ssh/deploy_key $DEPLOY_USER@$DEPLOY_HOST "\
          cd $DEPLOY_PATH && \
          docker-compose down && \
          docker system prune -f && \
          docker-compose up -d --build"

    - name: Purge Cloudflare Cache
      run: |
        curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
        -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
        -H "Content-Type: application/json" \
        --data '{"purge_everything":true}'

    - name: Create Release
      if: success()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.VERSION }}
        release_name: Release v${{ steps.get_version.outputs.VERSION }}
        body: |
          Production deployment of version v${{ steps.get_version.outputs.VERSION }}
          Commit: ${{ github.sha }}
        draft: false
        prerelease: false
