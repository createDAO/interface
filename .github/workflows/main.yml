name: Production Deployment

on:
  push:
    branches: [ main ]
  

env:
  NODE_VERSION: '20'

permissions:
  contents: write
  deployments: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install Dependencies
      run: npm ci
    
    - name: TypeScript Check
      run: tsc --noEmit
    
    - name: Lint Check
      run: npm run lint
      
    - name: Build Check
      run: npm run build


  deploy-production:

    name: Deploy to Production
    needs: [test]
    runs-on: ubuntu-latest
    environment:
      name: Production
      url: https://createdao.org
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get Version
      id: get_version
      run: |
        # Get version from package.json
        VERSION=$(node -p "require('./package.json').version")
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        
        # Check if tag exists
        if ! git rev-parse "v${VERSION}" >/dev/null 2>&1; then
          # Create and push tag if it doesn't exist
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag -a "v${VERSION}" -m "Release v${VERSION}"
          git push origin "v${VERSION}"
        fi

    - name: Deploy to Production
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          cd ${{ secrets.DEPLOY_PATH }}
          git fetch origin
          git checkout main
          git pull origin main
          
          # Keep existing .env but update version variables
          export VITE_APP_VERSION=${{ steps.get_version.outputs.VERSION }}
          export VITE_COMMIT_HASH=${{ github.sha }}
          
          # Clean up and rebuild
          docker-compose down
          docker system prune -f
          
          # Build with version args
          docker-compose build \
            --build-arg VITE_APP_VERSION=$VITE_APP_VERSION \
            --build-arg VITE_COMMIT_HASH=$VITE_COMMIT_HASH \
            --no-cache
          
          # Append version variables to existing .env
          grep -v "VITE_COMMIT_HASH\|VITE_APP_VERSION" .env > .env.tmp || true
          echo "VITE_COMMIT_HASH=$VITE_COMMIT_HASH" >> .env.tmp
          echo "VITE_APP_VERSION=$VITE_APP_VERSION" >> .env.tmp
          mv .env.tmp .env
          
          # Start containers
          docker-compose up -d

    - name: Purge Cloudflare Cache
      run: |
        curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
        -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
        -H "Content-Type: application/json" \
        --data '{"purge_everything":true}'

    - name: Create/Update Release
      if: success()
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.get_version.outputs.VERSION }}
        name: Release v${{ steps.get_version.outputs.VERSION }}
        body: |
          Production deployment of version v${{ steps.get_version.outputs.VERSION }}
          Commit: ${{ github.sha }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
